// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ClientHeartBeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientHeartBeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientHeartBeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientHeartBeatResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_ACTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  ClientHeartBeatRequest_descriptor_ = file->message_type(0);
  static const int ClientHeartBeatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatRequest, client_time_),
  };
  ClientHeartBeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientHeartBeatRequest_descriptor_,
      ClientHeartBeatRequest::default_instance_,
      ClientHeartBeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientHeartBeatRequest));
  ClientHeartBeatResponse_descriptor_ = file->message_type(1);
  static const int ClientHeartBeatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatResponse, server_time_),
  };
  ClientHeartBeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientHeartBeatResponse_descriptor_,
      ClientHeartBeatResponse::default_instance_,
      ClientHeartBeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientHeartBeatResponse));
  MSG_ACTION_TYPE_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientHeartBeatRequest_descriptor_, &ClientHeartBeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientHeartBeatResponse_descriptor_, &ClientHeartBeatResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete ClientHeartBeatRequest::default_instance_;
  delete ClientHeartBeatRequest_reflection_;
  delete ClientHeartBeatResponse::default_instance_;
  delete ClientHeartBeatResponse_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"-\n\026ClientHeartBeatReques"
    "t\022\023\n\013client_time\030\001 \002(\005\".\n\027ClientHeartBea"
    "tResponse\022\023\n\013server_time\030\001 \002(\005*D\n\017MSG_AC"
    "TION_TYPE\022\017\n\013MSG_REQUEST\020\000\022\020\n\014MSG_RESPON"
    "SE\020\001\022\016\n\nMSG_NOTIFY\020\002*\213\001\n\013MessageType\022\032\n\026"
    "MSG_SOCCER_PLAYER_INFO\020\001\022\022\n\016MSG_HEART_BE"
    "AT\020\002\022\024\n\020MSG_CLIENT_LOGIN\020\003\022\034\n\030MSG_GATE_S"
    "ERVER_REGISTER\020\004\022\030\n\024MSG_DB_COMMON_UPDATE"
    "\020\005", 322);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ClientHeartBeatRequest::default_instance_ = new ClientHeartBeatRequest();
  ClientHeartBeatResponse::default_instance_ = new ClientHeartBeatResponse();
  ClientHeartBeatRequest::default_instance_->InitAsDefaultInstance();
  ClientHeartBeatResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_ACTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_ACTION_TYPE_descriptor_;
}
bool MSG_ACTION_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ClientHeartBeatRequest::kClientTimeFieldNumber;
#endif  // !_MSC_VER

ClientHeartBeatRequest::ClientHeartBeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientHeartBeatRequest::InitAsDefaultInstance() {
}

ClientHeartBeatRequest::ClientHeartBeatRequest(const ClientHeartBeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientHeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  client_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientHeartBeatRequest::~ClientHeartBeatRequest() {
  SharedDtor();
}

void ClientHeartBeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientHeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientHeartBeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientHeartBeatRequest_descriptor_;
}

const ClientHeartBeatRequest& ClientHeartBeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ClientHeartBeatRequest* ClientHeartBeatRequest::default_instance_ = NULL;

ClientHeartBeatRequest* ClientHeartBeatRequest::New() const {
  return new ClientHeartBeatRequest;
}

void ClientHeartBeatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientHeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_time_)));
          set_has_client_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientHeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_time = 1;
  if (has_client_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientHeartBeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_time = 1;
  if (has_client_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientHeartBeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_time = 1;
    if (has_client_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientHeartBeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientHeartBeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientHeartBeatRequest::MergeFrom(const ClientHeartBeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_time()) {
      set_client_time(from.client_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientHeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHeartBeatRequest::CopyFrom(const ClientHeartBeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHeartBeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientHeartBeatRequest::Swap(ClientHeartBeatRequest* other) {
  if (other != this) {
    std::swap(client_time_, other->client_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientHeartBeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientHeartBeatRequest_descriptor_;
  metadata.reflection = ClientHeartBeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientHeartBeatResponse::kServerTimeFieldNumber;
#endif  // !_MSC_VER

ClientHeartBeatResponse::ClientHeartBeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientHeartBeatResponse::InitAsDefaultInstance() {
}

ClientHeartBeatResponse::ClientHeartBeatResponse(const ClientHeartBeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientHeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  server_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientHeartBeatResponse::~ClientHeartBeatResponse() {
  SharedDtor();
}

void ClientHeartBeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientHeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientHeartBeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientHeartBeatResponse_descriptor_;
}

const ClientHeartBeatResponse& ClientHeartBeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ClientHeartBeatResponse* ClientHeartBeatResponse::default_instance_ = NULL;

ClientHeartBeatResponse* ClientHeartBeatResponse::New() const {
  return new ClientHeartBeatResponse;
}

void ClientHeartBeatResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientHeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientHeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientHeartBeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_time = 1;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientHeartBeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_time = 1;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientHeartBeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientHeartBeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientHeartBeatResponse::MergeFrom(const ClientHeartBeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientHeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHeartBeatResponse::CopyFrom(const ClientHeartBeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHeartBeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientHeartBeatResponse::Swap(ClientHeartBeatResponse* other) {
  if (other != this) {
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientHeartBeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientHeartBeatResponse_descriptor_;
  metadata.reflection = ClientHeartBeatResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
