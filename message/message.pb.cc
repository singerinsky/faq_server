// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SoccerPlayerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoccerPlayerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoccerPlayerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoccerPlayerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientHeartBeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientHeartBeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientHeartBeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientHeartBeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateServerRegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateServerRegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateServerRegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateServerRegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataCommonUpdateNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCommonUpdateNtf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_ACTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  SoccerPlayerInfoRequest_descriptor_ = file->message_type(0);
  static const int SoccerPlayerInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoccerPlayerInfoRequest, player_id_),
  };
  SoccerPlayerInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoccerPlayerInfoRequest_descriptor_,
      SoccerPlayerInfoRequest::default_instance_,
      SoccerPlayerInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoccerPlayerInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoccerPlayerInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoccerPlayerInfoRequest));
  SoccerPlayerInfoResponse_descriptor_ = file->message_type(1);
  static const int SoccerPlayerInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoccerPlayerInfoResponse, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoccerPlayerInfoResponse, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoccerPlayerInfoResponse, age_),
  };
  SoccerPlayerInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoccerPlayerInfoResponse_descriptor_,
      SoccerPlayerInfoResponse::default_instance_,
      SoccerPlayerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoccerPlayerInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoccerPlayerInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoccerPlayerInfoResponse));
  ClientHeartBeatRequest_descriptor_ = file->message_type(2);
  static const int ClientHeartBeatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatRequest, client_time_),
  };
  ClientHeartBeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientHeartBeatRequest_descriptor_,
      ClientHeartBeatRequest::default_instance_,
      ClientHeartBeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientHeartBeatRequest));
  ClientHeartBeatResponse_descriptor_ = file->message_type(3);
  static const int ClientHeartBeatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatResponse, server_time_),
  };
  ClientHeartBeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientHeartBeatResponse_descriptor_,
      ClientHeartBeatResponse::default_instance_,
      ClientHeartBeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientHeartBeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientHeartBeatResponse));
  ClientLoginRequest_descriptor_ = file->message_type(4);
  static const int ClientLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRequest, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRequest, player_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRequest, md5_code_),
  };
  ClientLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginRequest_descriptor_,
      ClientLoginRequest::default_instance_,
      ClientLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginRequest));
  ClientLoginResponse_descriptor_ = file->message_type(5);
  static const int ClientLoginResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginResponse, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginResponse, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginResponse, role_data_),
  };
  ClientLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginResponse_descriptor_,
      ClientLoginResponse::default_instance_,
      ClientLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginResponse));
  GateServerRegisterRequest_descriptor_ = file->message_type(6);
  static const int GateServerRegisterRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerRegisterRequest, server_index_),
  };
  GateServerRegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateServerRegisterRequest_descriptor_,
      GateServerRegisterRequest::default_instance_,
      GateServerRegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerRegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerRegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateServerRegisterRequest));
  GateServerRegisterResponse_descriptor_ = file->message_type(7);
  static const int GateServerRegisterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerRegisterResponse, ret_),
  };
  GateServerRegisterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateServerRegisterResponse_descriptor_,
      GateServerRegisterResponse::default_instance_,
      GateServerRegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerRegisterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateServerRegisterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateServerRegisterResponse));
  DataCommonUpdateNtf_descriptor_ = file->message_type(8);
  static const int DataCommonUpdateNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCommonUpdateNtf, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCommonUpdateNtf, sql_str_),
  };
  DataCommonUpdateNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCommonUpdateNtf_descriptor_,
      DataCommonUpdateNtf::default_instance_,
      DataCommonUpdateNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCommonUpdateNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCommonUpdateNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCommonUpdateNtf));
  MSG_ACTION_TYPE_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoccerPlayerInfoRequest_descriptor_, &SoccerPlayerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoccerPlayerInfoResponse_descriptor_, &SoccerPlayerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientHeartBeatRequest_descriptor_, &ClientHeartBeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientHeartBeatResponse_descriptor_, &ClientHeartBeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginRequest_descriptor_, &ClientLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginResponse_descriptor_, &ClientLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateServerRegisterRequest_descriptor_, &GateServerRegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateServerRegisterResponse_descriptor_, &GateServerRegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCommonUpdateNtf_descriptor_, &DataCommonUpdateNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete SoccerPlayerInfoRequest::default_instance_;
  delete SoccerPlayerInfoRequest_reflection_;
  delete SoccerPlayerInfoResponse::default_instance_;
  delete SoccerPlayerInfoResponse_reflection_;
  delete ClientHeartBeatRequest::default_instance_;
  delete ClientHeartBeatRequest_reflection_;
  delete ClientHeartBeatResponse::default_instance_;
  delete ClientHeartBeatResponse_reflection_;
  delete ClientLoginRequest::default_instance_;
  delete ClientLoginRequest_reflection_;
  delete ClientLoginResponse::default_instance_;
  delete ClientLoginResponse_reflection_;
  delete GateServerRegisterRequest::default_instance_;
  delete GateServerRegisterRequest_reflection_;
  delete GateServerRegisterResponse::default_instance_;
  delete GateServerRegisterResponse_reflection_;
  delete DataCommonUpdateNtf::default_instance_;
  delete DataCommonUpdateNtf_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_role_5finfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\032\017role_info.proto\",\n\027Socc"
    "erPlayerInfoRequest\022\021\n\tplayer_id\030\001 \002(\005\"O"
    "\n\030SoccerPlayerInfoResponse\022\021\n\tplayer_id\030"
    "\001 \002(\005\022\023\n\013player_name\030\002 \002(\t\022\013\n\003age\030\003 \002(\005\""
    "-\n\026ClientHeartBeatRequest\022\023\n\013client_time"
    "\030\001 \002(\005\".\n\027ClientHeartBeatResponse\022\023\n\013ser"
    "ver_time\030\001 \002(\005\"M\n\022ClientLoginRequest\022\021\n\t"
    "player_id\030\001 \002(\005\022\022\n\nplayer_pwd\030\002 \002(\t\022\020\n\010m"
    "d5_code\030\003 \002(\t\"l\n\023ClientLoginResponse\022\013\n\003"
    "ret\030\001 \002(\005\022\021\n\tplayer_id\030\002 \001(\005\022\023\n\013player_n"
    "ame\030\003 \001(\t\022 \n\trole_data\030\004 \001(\0132\r.db_role_i"
    "nfo\"1\n\031GateServerRegisterRequest\022\024\n\014serv"
    "er_index\030\001 \002(\005\")\n\032GateServerRegisterResp"
    "onse\022\013\n\003ret\030\001 \002(\005\"3\n\023DataCommonUpdateNtf"
    "\022\013\n\003key\030\001 \002(\005\022\017\n\007sql_str\030\002 \002(\t*D\n\017MSG_AC"
    "TION_TYPE\022\017\n\013MSG_REQUEST\020\000\022\020\n\014MSG_RESPON"
    "SE\020\001\022\016\n\nMSG_NOTIFY\020\002*\213\001\n\013MessageType\022\032\n\026"
    "MSG_SOCCER_PLAYER_INFO\020\001\022\022\n\016MSG_HEART_BE"
    "AT\020\002\022\024\n\020MSG_CLIENT_LOGIN\020\003\022\034\n\030MSG_GATE_S"
    "ERVER_REGISTER\020\004\022\030\n\024MSG_DB_COMMON_UPDATE"
    "\020\005", 802);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  SoccerPlayerInfoRequest::default_instance_ = new SoccerPlayerInfoRequest();
  SoccerPlayerInfoResponse::default_instance_ = new SoccerPlayerInfoResponse();
  ClientHeartBeatRequest::default_instance_ = new ClientHeartBeatRequest();
  ClientHeartBeatResponse::default_instance_ = new ClientHeartBeatResponse();
  ClientLoginRequest::default_instance_ = new ClientLoginRequest();
  ClientLoginResponse::default_instance_ = new ClientLoginResponse();
  GateServerRegisterRequest::default_instance_ = new GateServerRegisterRequest();
  GateServerRegisterResponse::default_instance_ = new GateServerRegisterResponse();
  DataCommonUpdateNtf::default_instance_ = new DataCommonUpdateNtf();
  SoccerPlayerInfoRequest::default_instance_->InitAsDefaultInstance();
  SoccerPlayerInfoResponse::default_instance_->InitAsDefaultInstance();
  ClientHeartBeatRequest::default_instance_->InitAsDefaultInstance();
  ClientHeartBeatResponse::default_instance_->InitAsDefaultInstance();
  ClientLoginRequest::default_instance_->InitAsDefaultInstance();
  ClientLoginResponse::default_instance_->InitAsDefaultInstance();
  GateServerRegisterRequest::default_instance_->InitAsDefaultInstance();
  GateServerRegisterResponse::default_instance_->InitAsDefaultInstance();
  DataCommonUpdateNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* MSG_ACTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_ACTION_TYPE_descriptor_;
}
bool MSG_ACTION_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SoccerPlayerInfoRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

SoccerPlayerInfoRequest::SoccerPlayerInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoccerPlayerInfoRequest::InitAsDefaultInstance() {
}

SoccerPlayerInfoRequest::SoccerPlayerInfoRequest(const SoccerPlayerInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoccerPlayerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoccerPlayerInfoRequest::~SoccerPlayerInfoRequest() {
  SharedDtor();
}

void SoccerPlayerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoccerPlayerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoccerPlayerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoccerPlayerInfoRequest_descriptor_;
}

const SoccerPlayerInfoRequest& SoccerPlayerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

SoccerPlayerInfoRequest* SoccerPlayerInfoRequest::default_instance_ = NULL;

SoccerPlayerInfoRequest* SoccerPlayerInfoRequest::New() const {
  return new SoccerPlayerInfoRequest;
}

void SoccerPlayerInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoccerPlayerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoccerPlayerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoccerPlayerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoccerPlayerInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoccerPlayerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoccerPlayerInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoccerPlayerInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoccerPlayerInfoRequest::MergeFrom(const SoccerPlayerInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoccerPlayerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoccerPlayerInfoRequest::CopyFrom(const SoccerPlayerInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoccerPlayerInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SoccerPlayerInfoRequest::Swap(SoccerPlayerInfoRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoccerPlayerInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoccerPlayerInfoRequest_descriptor_;
  metadata.reflection = SoccerPlayerInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoccerPlayerInfoResponse::kPlayerIdFieldNumber;
const int SoccerPlayerInfoResponse::kPlayerNameFieldNumber;
const int SoccerPlayerInfoResponse::kAgeFieldNumber;
#endif  // !_MSC_VER

SoccerPlayerInfoResponse::SoccerPlayerInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoccerPlayerInfoResponse::InitAsDefaultInstance() {
}

SoccerPlayerInfoResponse::SoccerPlayerInfoResponse(const SoccerPlayerInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoccerPlayerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  age_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoccerPlayerInfoResponse::~SoccerPlayerInfoResponse() {
  SharedDtor();
}

void SoccerPlayerInfoResponse::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void SoccerPlayerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoccerPlayerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoccerPlayerInfoResponse_descriptor_;
}

const SoccerPlayerInfoResponse& SoccerPlayerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

SoccerPlayerInfoResponse* SoccerPlayerInfoResponse::default_instance_ = NULL;

SoccerPlayerInfoResponse* SoccerPlayerInfoResponse::New() const {
  return new SoccerPlayerInfoResponse;
}

void SoccerPlayerInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    age_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoccerPlayerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // required string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_age;
        break;
      }

      // required int32 age = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoccerPlayerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // required int32 age = 3;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoccerPlayerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // required int32 age = 3;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoccerPlayerInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required int32 age = 3;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoccerPlayerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoccerPlayerInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoccerPlayerInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoccerPlayerInfoResponse::MergeFrom(const SoccerPlayerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoccerPlayerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoccerPlayerInfoResponse::CopyFrom(const SoccerPlayerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoccerPlayerInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SoccerPlayerInfoResponse::Swap(SoccerPlayerInfoResponse* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoccerPlayerInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoccerPlayerInfoResponse_descriptor_;
  metadata.reflection = SoccerPlayerInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientHeartBeatRequest::kClientTimeFieldNumber;
#endif  // !_MSC_VER

ClientHeartBeatRequest::ClientHeartBeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientHeartBeatRequest::InitAsDefaultInstance() {
}

ClientHeartBeatRequest::ClientHeartBeatRequest(const ClientHeartBeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientHeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  client_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientHeartBeatRequest::~ClientHeartBeatRequest() {
  SharedDtor();
}

void ClientHeartBeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientHeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientHeartBeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientHeartBeatRequest_descriptor_;
}

const ClientHeartBeatRequest& ClientHeartBeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ClientHeartBeatRequest* ClientHeartBeatRequest::default_instance_ = NULL;

ClientHeartBeatRequest* ClientHeartBeatRequest::New() const {
  return new ClientHeartBeatRequest;
}

void ClientHeartBeatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientHeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_time_)));
          set_has_client_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientHeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_time = 1;
  if (has_client_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientHeartBeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_time = 1;
  if (has_client_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientHeartBeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_time = 1;
    if (has_client_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientHeartBeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientHeartBeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientHeartBeatRequest::MergeFrom(const ClientHeartBeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_time()) {
      set_client_time(from.client_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientHeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHeartBeatRequest::CopyFrom(const ClientHeartBeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHeartBeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientHeartBeatRequest::Swap(ClientHeartBeatRequest* other) {
  if (other != this) {
    std::swap(client_time_, other->client_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientHeartBeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientHeartBeatRequest_descriptor_;
  metadata.reflection = ClientHeartBeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientHeartBeatResponse::kServerTimeFieldNumber;
#endif  // !_MSC_VER

ClientHeartBeatResponse::ClientHeartBeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientHeartBeatResponse::InitAsDefaultInstance() {
}

ClientHeartBeatResponse::ClientHeartBeatResponse(const ClientHeartBeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientHeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  server_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientHeartBeatResponse::~ClientHeartBeatResponse() {
  SharedDtor();
}

void ClientHeartBeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientHeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientHeartBeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientHeartBeatResponse_descriptor_;
}

const ClientHeartBeatResponse& ClientHeartBeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ClientHeartBeatResponse* ClientHeartBeatResponse::default_instance_ = NULL;

ClientHeartBeatResponse* ClientHeartBeatResponse::New() const {
  return new ClientHeartBeatResponse;
}

void ClientHeartBeatResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientHeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientHeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientHeartBeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_time = 1;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientHeartBeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_time = 1;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientHeartBeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientHeartBeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientHeartBeatResponse::MergeFrom(const ClientHeartBeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientHeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHeartBeatResponse::CopyFrom(const ClientHeartBeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHeartBeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientHeartBeatResponse::Swap(ClientHeartBeatResponse* other) {
  if (other != this) {
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientHeartBeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientHeartBeatResponse_descriptor_;
  metadata.reflection = ClientHeartBeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginRequest::kPlayerIdFieldNumber;
const int ClientLoginRequest::kPlayerPwdFieldNumber;
const int ClientLoginRequest::kMd5CodeFieldNumber;
#endif  // !_MSC_VER

ClientLoginRequest::ClientLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginRequest::InitAsDefaultInstance() {
}

ClientLoginRequest::ClientLoginRequest(const ClientLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginRequest::~ClientLoginRequest() {
  SharedDtor();
}

void ClientLoginRequest::SharedDtor() {
  if (player_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete player_pwd_;
  }
  if (md5_code_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_code_;
  }
  if (this != default_instance_) {
  }
}

void ClientLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginRequest_descriptor_;
}

const ClientLoginRequest& ClientLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ClientLoginRequest* ClientLoginRequest::default_instance_ = NULL;

ClientLoginRequest* ClientLoginRequest::New() const {
  return new ClientLoginRequest;
}

void ClientLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_pwd()) {
      if (player_pwd_ != &::google::protobuf::internal::kEmptyString) {
        player_pwd_->clear();
      }
    }
    if (has_md5_code()) {
      if (md5_code_ != &::google::protobuf::internal::kEmptyString) {
        md5_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_pwd;
        break;
      }

      // required string player_pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_pwd().data(), this->player_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_md5_code;
        break;
      }

      // required string md5_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5_code().data(), this->md5_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required string player_pwd = 2;
  if (has_player_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_pwd().data(), this->player_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_pwd(), output);
  }

  // required string md5_code = 3;
  if (has_md5_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5_code().data(), this->md5_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->md5_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required string player_pwd = 2;
  if (has_player_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_pwd().data(), this->player_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_pwd(), target);
  }

  // required string md5_code = 3;
  if (has_md5_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5_code().data(), this->md5_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required string player_pwd = 2;
    if (has_player_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_pwd());
    }

    // required string md5_code = 3;
    if (has_md5_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginRequest::MergeFrom(const ClientLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_pwd()) {
      set_player_pwd(from.player_pwd());
    }
    if (from.has_md5_code()) {
      set_md5_code(from.md5_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginRequest::CopyFrom(const ClientLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientLoginRequest::Swap(ClientLoginRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_pwd_, other->player_pwd_);
    std::swap(md5_code_, other->md5_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginRequest_descriptor_;
  metadata.reflection = ClientLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginResponse::kRetFieldNumber;
const int ClientLoginResponse::kPlayerIdFieldNumber;
const int ClientLoginResponse::kPlayerNameFieldNumber;
const int ClientLoginResponse::kRoleDataFieldNumber;
#endif  // !_MSC_VER

ClientLoginResponse::ClientLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginResponse::InitAsDefaultInstance() {
  role_data_ = const_cast< ::db_role_info*>(&::db_role_info::default_instance());
}

ClientLoginResponse::ClientLoginResponse(const ClientLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginResponse::~ClientLoginResponse() {
  SharedDtor();
}

void ClientLoginResponse::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
    delete role_data_;
  }
}

void ClientLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginResponse_descriptor_;
}

const ClientLoginResponse& ClientLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ClientLoginResponse* ClientLoginResponse::default_instance_ = NULL;

ClientLoginResponse* ClientLoginResponse::New() const {
  return new ClientLoginResponse;
}

void ClientLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    if (has_role_data()) {
      if (role_data_ != NULL) role_data_->::db_role_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_name;
        break;
      }

      // optional string player_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_data;
        break;
      }

      // optional .db_role_info role_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->player_name(), output);
  }

  // optional .db_role_info role_data = 4;
  if (has_role_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->player_name(), target);
  }

  // optional .db_role_info role_data = 4;
  if (has_role_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_name = 3;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional .db_role_info role_data = 4;
    if (has_role_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginResponse::MergeFrom(const ClientLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_role_data()) {
      mutable_role_data()->::db_role_info::MergeFrom(from.role_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginResponse::CopyFrom(const ClientLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_role_data()) {
    if (!this->role_data().IsInitialized()) return false;
  }
  return true;
}

void ClientLoginResponse::Swap(ClientLoginResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(role_data_, other->role_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginResponse_descriptor_;
  metadata.reflection = ClientLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateServerRegisterRequest::kServerIndexFieldNumber;
#endif  // !_MSC_VER

GateServerRegisterRequest::GateServerRegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateServerRegisterRequest::InitAsDefaultInstance() {
}

GateServerRegisterRequest::GateServerRegisterRequest(const GateServerRegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateServerRegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  server_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateServerRegisterRequest::~GateServerRegisterRequest() {
  SharedDtor();
}

void GateServerRegisterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateServerRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateServerRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateServerRegisterRequest_descriptor_;
}

const GateServerRegisterRequest& GateServerRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

GateServerRegisterRequest* GateServerRegisterRequest::default_instance_ = NULL;

GateServerRegisterRequest* GateServerRegisterRequest::New() const {
  return new GateServerRegisterRequest;
}

void GateServerRegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateServerRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_index_)));
          set_has_server_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateServerRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_index = 1;
  if (has_server_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateServerRegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_index = 1;
  if (has_server_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateServerRegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_index = 1;
    if (has_server_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateServerRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateServerRegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateServerRegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateServerRegisterRequest::MergeFrom(const GateServerRegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_index()) {
      set_server_index(from.server_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateServerRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateServerRegisterRequest::CopyFrom(const GateServerRegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateServerRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GateServerRegisterRequest::Swap(GateServerRegisterRequest* other) {
  if (other != this) {
    std::swap(server_index_, other->server_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateServerRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateServerRegisterRequest_descriptor_;
  metadata.reflection = GateServerRegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateServerRegisterResponse::kRetFieldNumber;
#endif  // !_MSC_VER

GateServerRegisterResponse::GateServerRegisterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GateServerRegisterResponse::InitAsDefaultInstance() {
}

GateServerRegisterResponse::GateServerRegisterResponse(const GateServerRegisterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GateServerRegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateServerRegisterResponse::~GateServerRegisterResponse() {
  SharedDtor();
}

void GateServerRegisterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateServerRegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateServerRegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateServerRegisterResponse_descriptor_;
}

const GateServerRegisterResponse& GateServerRegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

GateServerRegisterResponse* GateServerRegisterResponse::default_instance_ = NULL;

GateServerRegisterResponse* GateServerRegisterResponse::New() const {
  return new GateServerRegisterResponse;
}

void GateServerRegisterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateServerRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GateServerRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GateServerRegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GateServerRegisterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateServerRegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateServerRegisterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateServerRegisterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateServerRegisterResponse::MergeFrom(const GateServerRegisterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateServerRegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateServerRegisterResponse::CopyFrom(const GateServerRegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateServerRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GateServerRegisterResponse::Swap(GateServerRegisterResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateServerRegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateServerRegisterResponse_descriptor_;
  metadata.reflection = GateServerRegisterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataCommonUpdateNtf::kKeyFieldNumber;
const int DataCommonUpdateNtf::kSqlStrFieldNumber;
#endif  // !_MSC_VER

DataCommonUpdateNtf::DataCommonUpdateNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCommonUpdateNtf::InitAsDefaultInstance() {
}

DataCommonUpdateNtf::DataCommonUpdateNtf(const DataCommonUpdateNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCommonUpdateNtf::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  sql_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCommonUpdateNtf::~DataCommonUpdateNtf() {
  SharedDtor();
}

void DataCommonUpdateNtf::SharedDtor() {
  if (sql_str_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_str_;
  }
  if (this != default_instance_) {
  }
}

void DataCommonUpdateNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCommonUpdateNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCommonUpdateNtf_descriptor_;
}

const DataCommonUpdateNtf& DataCommonUpdateNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

DataCommonUpdateNtf* DataCommonUpdateNtf::default_instance_ = NULL;

DataCommonUpdateNtf* DataCommonUpdateNtf::New() const {
  return new DataCommonUpdateNtf;
}

void DataCommonUpdateNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    if (has_sql_str()) {
      if (sql_str_ != &::google::protobuf::internal::kEmptyString) {
        sql_str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataCommonUpdateNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sql_str;
        break;
      }

      // required string sql_str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sql_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql_str().data(), this->sql_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataCommonUpdateNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sql_str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCommonUpdateNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required string sql_str = 2;
  if (has_sql_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql_str().data(), this->sql_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql_str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCommonUpdateNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required string sql_str = 2;
    if (has_sql_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql_str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCommonUpdateNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCommonUpdateNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCommonUpdateNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataCommonUpdateNtf::MergeFrom(const DataCommonUpdateNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_sql_str()) {
      set_sql_str(from.sql_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataCommonUpdateNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCommonUpdateNtf::CopyFrom(const DataCommonUpdateNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCommonUpdateNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DataCommonUpdateNtf::Swap(DataCommonUpdateNtf* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(sql_str_, other->sql_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataCommonUpdateNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCommonUpdateNtf_descriptor_;
  metadata.reflection = DataCommonUpdateNtf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
