// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_info.proto

#ifndef PROTOBUF_role_5finfo_2eproto__INCLUDED
#define PROTOBUF_role_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_role_5finfo_2eproto();
void protobuf_AssignDesc_role_5finfo_2eproto();
void protobuf_ShutdownFile_role_5finfo_2eproto();

class db_role_info;

// ===================================================================

class db_role_info : public ::google::protobuf::Message {
 public:
  db_role_info();
  virtual ~db_role_info();

  db_role_info(const db_role_info& from);

  inline db_role_info& operator=(const db_role_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_role_info& default_instance();

  void Swap(db_role_info* other);

  // implements Message ----------------------------------------------

  db_role_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_role_info& from);
  void MergeFrom(const db_role_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);

  // required int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // required int32 tid = 3;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 3;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);

  // required int32 job_type = 6;
  inline bool has_job_type() const;
  inline void clear_job_type();
  static const int kJobTypeFieldNumber = 6;
  inline ::google::protobuf::int32 job_type() const;
  inline void set_job_type(::google::protobuf::int32 value);

  // required int32 role_level = 7;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 7;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);

  // required int32 role_exp = 8;
  inline bool has_role_exp() const;
  inline void clear_role_exp();
  static const int kRoleExpFieldNumber = 8;
  inline ::google::protobuf::int32 role_exp() const;
  inline void set_role_exp(::google::protobuf::int32 value);

  // required int32 costume_tid = 9;
  inline bool has_costume_tid() const;
  inline void clear_costume_tid();
  static const int kCostumeTidFieldNumber = 9;
  inline ::google::protobuf::int32 costume_tid() const;
  inline void set_costume_tid(::google::protobuf::int32 value);

  // required int32 title = 10;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 10;
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);

  // required int32 coin = 11;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 11;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // required int32 coupon = 12;
  inline bool has_coupon() const;
  inline void clear_coupon();
  static const int kCouponFieldNumber = 12;
  inline ::google::protobuf::int32 coupon() const;
  inline void set_coupon(::google::protobuf::int32 value);

  // required int32 diamond = 13;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 13;
  inline ::google::protobuf::int32 diamond() const;
  inline void set_diamond(::google::protobuf::int32 value);

  // required int32 vip_end_ts = 14;
  inline bool has_vip_end_ts() const;
  inline void clear_vip_end_ts();
  static const int kVipEndTsFieldNumber = 14;
  inline ::google::protobuf::int32 vip_end_ts() const;
  inline void set_vip_end_ts(::google::protobuf::int32 value);

  // required int32 vip_level = 15;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 15;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // required int32 map_id = 16;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 16;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // required int32 map_x = 17;
  inline bool has_map_x() const;
  inline void clear_map_x();
  static const int kMapXFieldNumber = 17;
  inline ::google::protobuf::int32 map_x() const;
  inline void set_map_x(::google::protobuf::int32 value);

  // required int32 map_y = 18;
  inline bool has_map_y() const;
  inline void clear_map_y();
  static const int kMapYFieldNumber = 18;
  inline ::google::protobuf::int32 map_y() const;
  inline void set_map_y(::google::protobuf::int32 value);

  // required int32 last_map_id = 19;
  inline bool has_last_map_id() const;
  inline void clear_last_map_id();
  static const int kLastMapIdFieldNumber = 19;
  inline ::google::protobuf::int32 last_map_id() const;
  inline void set_last_map_id(::google::protobuf::int32 value);

  // required int32 last_map_x = 20;
  inline bool has_last_map_x() const;
  inline void clear_last_map_x();
  static const int kLastMapXFieldNumber = 20;
  inline ::google::protobuf::int32 last_map_x() const;
  inline void set_last_map_x(::google::protobuf::int32 value);

  // required int32 last_map_y = 21;
  inline bool has_last_map_y() const;
  inline void clear_last_map_y();
  static const int kLastMapYFieldNumber = 21;
  inline ::google::protobuf::int32 last_map_y() const;
  inline void set_last_map_y(::google::protobuf::int32 value);

  // required int32 flag = 22;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 22;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required int32 status = 23;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 23;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 server_id = 24;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 24;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required int32 create_time = 25;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 25;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // required int32 team_id = 26;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 26;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);

  // required int32 team_create_time = 27;
  inline bool has_team_create_time() const;
  inline void clear_team_create_time();
  static const int kTeamCreateTimeFieldNumber = 27;
  inline ::google::protobuf::int32 team_create_time() const;
  inline void set_team_create_time(::google::protobuf::int32 value);

  // required int32 bag_size = 28;
  inline bool has_bag_size() const;
  inline void clear_bag_size();
  static const int kBagSizeFieldNumber = 28;
  inline ::google::protobuf::int32 bag_size() const;
  inline void set_bag_size(::google::protobuf::int32 value);

  // required int32 depot_size = 29;
  inline bool has_depot_size() const;
  inline void clear_depot_size();
  static const int kDepotSizeFieldNumber = 29;
  inline ::google::protobuf::int32 depot_size() const;
  inline void set_depot_size(::google::protobuf::int32 value);

  // required int32 buddy_size = 30;
  inline bool has_buddy_size() const;
  inline void clear_buddy_size();
  static const int kBuddySizeFieldNumber = 30;
  inline ::google::protobuf::int32 buddy_size() const;
  inline void set_buddy_size(::google::protobuf::int32 value);

  // required int32 lineup_size = 31;
  inline bool has_lineup_size() const;
  inline void clear_lineup_size();
  static const int kLineupSizeFieldNumber = 31;
  inline ::google::protobuf::int32 lineup_size() const;
  inline void set_lineup_size(::google::protobuf::int32 value);

  // required int32 default_lineup_id = 32;
  inline bool has_default_lineup_id() const;
  inline void clear_default_lineup_id();
  static const int kDefaultLineupIdFieldNumber = 32;
  inline ::google::protobuf::int32 default_lineup_id() const;
  inline void set_default_lineup_id(::google::protobuf::int32 value);

  // required int32 lineup_capacity = 33;
  inline bool has_lineup_capacity() const;
  inline void clear_lineup_capacity();
  static const int kLineupCapacityFieldNumber = 33;
  inline ::google::protobuf::int32 lineup_capacity() const;
  inline void set_lineup_capacity(::google::protobuf::int32 value);

  // required int32 login_time = 34;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 34;
  inline ::google::protobuf::int32 login_time() const;
  inline void set_login_time(::google::protobuf::int32 value);

  // required int32 last_logoff_time = 35;
  inline bool has_last_logoff_time() const;
  inline void clear_last_logoff_time();
  static const int kLastLogoffTimeFieldNumber = 35;
  inline ::google::protobuf::int32 last_logoff_time() const;
  inline void set_last_logoff_time(::google::protobuf::int32 value);

  // required string login_ip = 36;
  inline bool has_login_ip() const;
  inline void clear_login_ip();
  static const int kLoginIpFieldNumber = 36;
  inline const ::std::string& login_ip() const;
  inline void set_login_ip(const ::std::string& value);
  inline void set_login_ip(const char* value);
  inline void set_login_ip(const char* value, size_t size);
  inline ::std::string* mutable_login_ip();
  inline ::std::string* release_login_ip();
  inline void set_allocated_login_ip(::std::string* login_ip);

  // required int32 instance_count = 37;
  inline bool has_instance_count() const;
  inline void clear_instance_count();
  static const int kInstanceCountFieldNumber = 37;
  inline ::google::protobuf::int32 instance_count() const;
  inline void set_instance_count(::google::protobuf::int32 value);

  // required int32 instance_time = 38;
  inline bool has_instance_time() const;
  inline void clear_instance_time();
  static const int kInstanceTimeFieldNumber = 38;
  inline ::google::protobuf::int32 instance_time() const;
  inline void set_instance_time(::google::protobuf::int32 value);

  // required int32 guild_id = 39;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 39;
  inline ::google::protobuf::int32 guild_id() const;
  inline void set_guild_id(::google::protobuf::int32 value);

  // required int32 guild_time = 40;
  inline bool has_guild_time() const;
  inline void clear_guild_time();
  static const int kGuildTimeFieldNumber = 40;
  inline ::google::protobuf::int32 guild_time() const;
  inline void set_guild_time(::google::protobuf::int32 value);

  // required string guild_name = 41;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 41;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // required int32 phy_strength = 42;
  inline bool has_phy_strength() const;
  inline void clear_phy_strength();
  static const int kPhyStrengthFieldNumber = 42;
  inline ::google::protobuf::int32 phy_strength() const;
  inline void set_phy_strength(::google::protobuf::int32 value);

  // required int32 extra_phy_strength = 43;
  inline bool has_extra_phy_strength() const;
  inline void clear_extra_phy_strength();
  static const int kExtraPhyStrengthFieldNumber = 43;
  inline ::google::protobuf::int32 extra_phy_strength() const;
  inline void set_extra_phy_strength(::google::protobuf::int32 value);

  // required int32 time_to_recover_phy_strength = 44;
  inline bool has_time_to_recover_phy_strength() const;
  inline void clear_time_to_recover_phy_strength();
  static const int kTimeToRecoverPhyStrengthFieldNumber = 44;
  inline ::google::protobuf::int32 time_to_recover_phy_strength() const;
  inline void set_time_to_recover_phy_strength(::google::protobuf::int32 value);

  // required int32 time_to_recover_extra_phy_strength = 45;
  inline bool has_time_to_recover_extra_phy_strength() const;
  inline void clear_time_to_recover_extra_phy_strength();
  static const int kTimeToRecoverExtraPhyStrengthFieldNumber = 45;
  inline ::google::protobuf::int32 time_to_recover_extra_phy_strength() const;
  inline void set_time_to_recover_extra_phy_strength(::google::protobuf::int32 value);

  // required int32 renown = 46;
  inline bool has_renown() const;
  inline void clear_renown();
  static const int kRenownFieldNumber = 46;
  inline ::google::protobuf::int32 renown() const;
  inline void set_renown(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:db_role_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_job_type();
  inline void clear_has_job_type();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_role_exp();
  inline void clear_has_role_exp();
  inline void set_has_costume_tid();
  inline void clear_has_costume_tid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_coupon();
  inline void clear_has_coupon();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_vip_end_ts();
  inline void clear_has_vip_end_ts();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_map_x();
  inline void clear_has_map_x();
  inline void set_has_map_y();
  inline void clear_has_map_y();
  inline void set_has_last_map_id();
  inline void clear_has_last_map_id();
  inline void set_has_last_map_x();
  inline void clear_has_last_map_x();
  inline void set_has_last_map_y();
  inline void clear_has_last_map_y();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_create_time();
  inline void clear_has_team_create_time();
  inline void set_has_bag_size();
  inline void clear_has_bag_size();
  inline void set_has_depot_size();
  inline void clear_has_depot_size();
  inline void set_has_buddy_size();
  inline void clear_has_buddy_size();
  inline void set_has_lineup_size();
  inline void clear_has_lineup_size();
  inline void set_has_default_lineup_id();
  inline void clear_has_default_lineup_id();
  inline void set_has_lineup_capacity();
  inline void clear_has_lineup_capacity();
  inline void set_has_login_time();
  inline void clear_has_login_time();
  inline void set_has_last_logoff_time();
  inline void clear_has_last_logoff_time();
  inline void set_has_login_ip();
  inline void clear_has_login_ip();
  inline void set_has_instance_count();
  inline void clear_has_instance_count();
  inline void set_has_instance_time();
  inline void clear_has_instance_time();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_time();
  inline void clear_has_guild_time();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_phy_strength();
  inline void clear_has_phy_strength();
  inline void set_has_extra_phy_strength();
  inline void clear_has_extra_phy_strength();
  inline void set_has_time_to_recover_phy_strength();
  inline void clear_has_time_to_recover_phy_strength();
  inline void set_has_time_to_recover_extra_phy_strength();
  inline void clear_has_time_to_recover_extra_phy_strength();
  inline void set_has_renown();
  inline void clear_has_renown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 uid_;
  ::std::string* name_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 job_type_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 role_exp_;
  ::google::protobuf::int32 costume_tid_;
  ::google::protobuf::int32 title_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 coupon_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::int32 vip_end_ts_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 map_x_;
  ::google::protobuf::int32 map_y_;
  ::google::protobuf::int32 last_map_id_;
  ::google::protobuf::int32 last_map_x_;
  ::google::protobuf::int32 last_map_y_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 create_time_;
  ::google::protobuf::int32 team_id_;
  ::google::protobuf::int32 team_create_time_;
  ::google::protobuf::int32 bag_size_;
  ::google::protobuf::int32 depot_size_;
  ::google::protobuf::int32 buddy_size_;
  ::google::protobuf::int32 lineup_size_;
  ::google::protobuf::int32 default_lineup_id_;
  ::google::protobuf::int32 lineup_capacity_;
  ::google::protobuf::int32 login_time_;
  ::google::protobuf::int32 last_logoff_time_;
  ::std::string* login_ip_;
  ::google::protobuf::int32 instance_count_;
  ::google::protobuf::int32 instance_time_;
  ::google::protobuf::int32 guild_id_;
  ::google::protobuf::int32 guild_time_;
  ::std::string* guild_name_;
  ::google::protobuf::int32 phy_strength_;
  ::google::protobuf::int32 extra_phy_strength_;
  ::google::protobuf::int32 time_to_recover_phy_strength_;
  ::google::protobuf::int32 time_to_recover_extra_phy_strength_;
  ::google::protobuf::int32 renown_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(46 + 31) / 32];

  friend void  protobuf_AddDesc_role_5finfo_2eproto();
  friend void protobuf_AssignDesc_role_5finfo_2eproto();
  friend void protobuf_ShutdownFile_role_5finfo_2eproto();

  void InitAsDefaultInstance();
  static db_role_info* default_instance_;
};
// ===================================================================


// ===================================================================

// db_role_info

// required int32 role_id = 1;
inline bool db_role_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_role_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_role_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_role_info::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 db_role_info::role_id() const {
  return role_id_;
}
inline void db_role_info::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required int32 uid = 2;
inline bool db_role_info::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_role_info::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_role_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_role_info::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 db_role_info::uid() const {
  return uid_;
}
inline void db_role_info::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// required int32 tid = 3;
inline bool db_role_info::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void db_role_info::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void db_role_info::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void db_role_info::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 db_role_info::tid() const {
  return tid_;
}
inline void db_role_info::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// required string name = 4;
inline bool db_role_info::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_role_info::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_role_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_role_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& db_role_info::name() const {
  return *name_;
}
inline void db_role_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_role_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void db_role_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* db_role_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 gender = 5;
inline bool db_role_info::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_role_info::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_role_info::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_role_info::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 db_role_info::gender() const {
  return gender_;
}
inline void db_role_info::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
}

// required int32 job_type = 6;
inline bool db_role_info::has_job_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_role_info::set_has_job_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_role_info::clear_has_job_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_role_info::clear_job_type() {
  job_type_ = 0;
  clear_has_job_type();
}
inline ::google::protobuf::int32 db_role_info::job_type() const {
  return job_type_;
}
inline void db_role_info::set_job_type(::google::protobuf::int32 value) {
  set_has_job_type();
  job_type_ = value;
}

// required int32 role_level = 7;
inline bool db_role_info::has_role_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_role_info::set_has_role_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_role_info::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_role_info::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 db_role_info::role_level() const {
  return role_level_;
}
inline void db_role_info::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// required int32 role_exp = 8;
inline bool db_role_info::has_role_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_role_info::set_has_role_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_role_info::clear_has_role_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_role_info::clear_role_exp() {
  role_exp_ = 0;
  clear_has_role_exp();
}
inline ::google::protobuf::int32 db_role_info::role_exp() const {
  return role_exp_;
}
inline void db_role_info::set_role_exp(::google::protobuf::int32 value) {
  set_has_role_exp();
  role_exp_ = value;
}

// required int32 costume_tid = 9;
inline bool db_role_info::has_costume_tid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_role_info::set_has_costume_tid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_role_info::clear_has_costume_tid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_role_info::clear_costume_tid() {
  costume_tid_ = 0;
  clear_has_costume_tid();
}
inline ::google::protobuf::int32 db_role_info::costume_tid() const {
  return costume_tid_;
}
inline void db_role_info::set_costume_tid(::google::protobuf::int32 value) {
  set_has_costume_tid();
  costume_tid_ = value;
}

// required int32 title = 10;
inline bool db_role_info::has_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void db_role_info::set_has_title() {
  _has_bits_[0] |= 0x00000200u;
}
inline void db_role_info::clear_has_title() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void db_role_info::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 db_role_info::title() const {
  return title_;
}
inline void db_role_info::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
}

// required int32 coin = 11;
inline bool db_role_info::has_coin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void db_role_info::set_has_coin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void db_role_info::clear_has_coin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void db_role_info::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 db_role_info::coin() const {
  return coin_;
}
inline void db_role_info::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// required int32 coupon = 12;
inline bool db_role_info::has_coupon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void db_role_info::set_has_coupon() {
  _has_bits_[0] |= 0x00000800u;
}
inline void db_role_info::clear_has_coupon() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void db_role_info::clear_coupon() {
  coupon_ = 0;
  clear_has_coupon();
}
inline ::google::protobuf::int32 db_role_info::coupon() const {
  return coupon_;
}
inline void db_role_info::set_coupon(::google::protobuf::int32 value) {
  set_has_coupon();
  coupon_ = value;
}

// required int32 diamond = 13;
inline bool db_role_info::has_diamond() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void db_role_info::set_has_diamond() {
  _has_bits_[0] |= 0x00001000u;
}
inline void db_role_info::clear_has_diamond() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void db_role_info::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
inline ::google::protobuf::int32 db_role_info::diamond() const {
  return diamond_;
}
inline void db_role_info::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
}

// required int32 vip_end_ts = 14;
inline bool db_role_info::has_vip_end_ts() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void db_role_info::set_has_vip_end_ts() {
  _has_bits_[0] |= 0x00002000u;
}
inline void db_role_info::clear_has_vip_end_ts() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void db_role_info::clear_vip_end_ts() {
  vip_end_ts_ = 0;
  clear_has_vip_end_ts();
}
inline ::google::protobuf::int32 db_role_info::vip_end_ts() const {
  return vip_end_ts_;
}
inline void db_role_info::set_vip_end_ts(::google::protobuf::int32 value) {
  set_has_vip_end_ts();
  vip_end_ts_ = value;
}

// required int32 vip_level = 15;
inline bool db_role_info::has_vip_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void db_role_info::set_has_vip_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void db_role_info::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void db_role_info::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 db_role_info::vip_level() const {
  return vip_level_;
}
inline void db_role_info::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// required int32 map_id = 16;
inline bool db_role_info::has_map_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void db_role_info::set_has_map_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void db_role_info::clear_has_map_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void db_role_info::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 db_role_info::map_id() const {
  return map_id_;
}
inline void db_role_info::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required int32 map_x = 17;
inline bool db_role_info::has_map_x() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void db_role_info::set_has_map_x() {
  _has_bits_[0] |= 0x00010000u;
}
inline void db_role_info::clear_has_map_x() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void db_role_info::clear_map_x() {
  map_x_ = 0;
  clear_has_map_x();
}
inline ::google::protobuf::int32 db_role_info::map_x() const {
  return map_x_;
}
inline void db_role_info::set_map_x(::google::protobuf::int32 value) {
  set_has_map_x();
  map_x_ = value;
}

// required int32 map_y = 18;
inline bool db_role_info::has_map_y() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void db_role_info::set_has_map_y() {
  _has_bits_[0] |= 0x00020000u;
}
inline void db_role_info::clear_has_map_y() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void db_role_info::clear_map_y() {
  map_y_ = 0;
  clear_has_map_y();
}
inline ::google::protobuf::int32 db_role_info::map_y() const {
  return map_y_;
}
inline void db_role_info::set_map_y(::google::protobuf::int32 value) {
  set_has_map_y();
  map_y_ = value;
}

// required int32 last_map_id = 19;
inline bool db_role_info::has_last_map_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void db_role_info::set_has_last_map_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void db_role_info::clear_has_last_map_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void db_role_info::clear_last_map_id() {
  last_map_id_ = 0;
  clear_has_last_map_id();
}
inline ::google::protobuf::int32 db_role_info::last_map_id() const {
  return last_map_id_;
}
inline void db_role_info::set_last_map_id(::google::protobuf::int32 value) {
  set_has_last_map_id();
  last_map_id_ = value;
}

// required int32 last_map_x = 20;
inline bool db_role_info::has_last_map_x() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void db_role_info::set_has_last_map_x() {
  _has_bits_[0] |= 0x00080000u;
}
inline void db_role_info::clear_has_last_map_x() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void db_role_info::clear_last_map_x() {
  last_map_x_ = 0;
  clear_has_last_map_x();
}
inline ::google::protobuf::int32 db_role_info::last_map_x() const {
  return last_map_x_;
}
inline void db_role_info::set_last_map_x(::google::protobuf::int32 value) {
  set_has_last_map_x();
  last_map_x_ = value;
}

// required int32 last_map_y = 21;
inline bool db_role_info::has_last_map_y() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void db_role_info::set_has_last_map_y() {
  _has_bits_[0] |= 0x00100000u;
}
inline void db_role_info::clear_has_last_map_y() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void db_role_info::clear_last_map_y() {
  last_map_y_ = 0;
  clear_has_last_map_y();
}
inline ::google::protobuf::int32 db_role_info::last_map_y() const {
  return last_map_y_;
}
inline void db_role_info::set_last_map_y(::google::protobuf::int32 value) {
  set_has_last_map_y();
  last_map_y_ = value;
}

// required int32 flag = 22;
inline bool db_role_info::has_flag() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void db_role_info::set_has_flag() {
  _has_bits_[0] |= 0x00200000u;
}
inline void db_role_info::clear_has_flag() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void db_role_info::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 db_role_info::flag() const {
  return flag_;
}
inline void db_role_info::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required int32 status = 23;
inline bool db_role_info::has_status() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void db_role_info::set_has_status() {
  _has_bits_[0] |= 0x00400000u;
}
inline void db_role_info::clear_has_status() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void db_role_info::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 db_role_info::status() const {
  return status_;
}
inline void db_role_info::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 server_id = 24;
inline bool db_role_info::has_server_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void db_role_info::set_has_server_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void db_role_info::clear_has_server_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void db_role_info::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 db_role_info::server_id() const {
  return server_id_;
}
inline void db_role_info::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required int32 create_time = 25;
inline bool db_role_info::has_create_time() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void db_role_info::set_has_create_time() {
  _has_bits_[0] |= 0x01000000u;
}
inline void db_role_info::clear_has_create_time() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void db_role_info::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
inline ::google::protobuf::int32 db_role_info::create_time() const {
  return create_time_;
}
inline void db_role_info::set_create_time(::google::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required int32 team_id = 26;
inline bool db_role_info::has_team_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void db_role_info::set_has_team_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void db_role_info::clear_has_team_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void db_role_info::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 db_role_info::team_id() const {
  return team_id_;
}
inline void db_role_info::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// required int32 team_create_time = 27;
inline bool db_role_info::has_team_create_time() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void db_role_info::set_has_team_create_time() {
  _has_bits_[0] |= 0x04000000u;
}
inline void db_role_info::clear_has_team_create_time() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void db_role_info::clear_team_create_time() {
  team_create_time_ = 0;
  clear_has_team_create_time();
}
inline ::google::protobuf::int32 db_role_info::team_create_time() const {
  return team_create_time_;
}
inline void db_role_info::set_team_create_time(::google::protobuf::int32 value) {
  set_has_team_create_time();
  team_create_time_ = value;
}

// required int32 bag_size = 28;
inline bool db_role_info::has_bag_size() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void db_role_info::set_has_bag_size() {
  _has_bits_[0] |= 0x08000000u;
}
inline void db_role_info::clear_has_bag_size() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void db_role_info::clear_bag_size() {
  bag_size_ = 0;
  clear_has_bag_size();
}
inline ::google::protobuf::int32 db_role_info::bag_size() const {
  return bag_size_;
}
inline void db_role_info::set_bag_size(::google::protobuf::int32 value) {
  set_has_bag_size();
  bag_size_ = value;
}

// required int32 depot_size = 29;
inline bool db_role_info::has_depot_size() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void db_role_info::set_has_depot_size() {
  _has_bits_[0] |= 0x10000000u;
}
inline void db_role_info::clear_has_depot_size() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void db_role_info::clear_depot_size() {
  depot_size_ = 0;
  clear_has_depot_size();
}
inline ::google::protobuf::int32 db_role_info::depot_size() const {
  return depot_size_;
}
inline void db_role_info::set_depot_size(::google::protobuf::int32 value) {
  set_has_depot_size();
  depot_size_ = value;
}

// required int32 buddy_size = 30;
inline bool db_role_info::has_buddy_size() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void db_role_info::set_has_buddy_size() {
  _has_bits_[0] |= 0x20000000u;
}
inline void db_role_info::clear_has_buddy_size() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void db_role_info::clear_buddy_size() {
  buddy_size_ = 0;
  clear_has_buddy_size();
}
inline ::google::protobuf::int32 db_role_info::buddy_size() const {
  return buddy_size_;
}
inline void db_role_info::set_buddy_size(::google::protobuf::int32 value) {
  set_has_buddy_size();
  buddy_size_ = value;
}

// required int32 lineup_size = 31;
inline bool db_role_info::has_lineup_size() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void db_role_info::set_has_lineup_size() {
  _has_bits_[0] |= 0x40000000u;
}
inline void db_role_info::clear_has_lineup_size() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void db_role_info::clear_lineup_size() {
  lineup_size_ = 0;
  clear_has_lineup_size();
}
inline ::google::protobuf::int32 db_role_info::lineup_size() const {
  return lineup_size_;
}
inline void db_role_info::set_lineup_size(::google::protobuf::int32 value) {
  set_has_lineup_size();
  lineup_size_ = value;
}

// required int32 default_lineup_id = 32;
inline bool db_role_info::has_default_lineup_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void db_role_info::set_has_default_lineup_id() {
  _has_bits_[0] |= 0x80000000u;
}
inline void db_role_info::clear_has_default_lineup_id() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void db_role_info::clear_default_lineup_id() {
  default_lineup_id_ = 0;
  clear_has_default_lineup_id();
}
inline ::google::protobuf::int32 db_role_info::default_lineup_id() const {
  return default_lineup_id_;
}
inline void db_role_info::set_default_lineup_id(::google::protobuf::int32 value) {
  set_has_default_lineup_id();
  default_lineup_id_ = value;
}

// required int32 lineup_capacity = 33;
inline bool db_role_info::has_lineup_capacity() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void db_role_info::set_has_lineup_capacity() {
  _has_bits_[1] |= 0x00000001u;
}
inline void db_role_info::clear_has_lineup_capacity() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void db_role_info::clear_lineup_capacity() {
  lineup_capacity_ = 0;
  clear_has_lineup_capacity();
}
inline ::google::protobuf::int32 db_role_info::lineup_capacity() const {
  return lineup_capacity_;
}
inline void db_role_info::set_lineup_capacity(::google::protobuf::int32 value) {
  set_has_lineup_capacity();
  lineup_capacity_ = value;
}

// required int32 login_time = 34;
inline bool db_role_info::has_login_time() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void db_role_info::set_has_login_time() {
  _has_bits_[1] |= 0x00000002u;
}
inline void db_role_info::clear_has_login_time() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void db_role_info::clear_login_time() {
  login_time_ = 0;
  clear_has_login_time();
}
inline ::google::protobuf::int32 db_role_info::login_time() const {
  return login_time_;
}
inline void db_role_info::set_login_time(::google::protobuf::int32 value) {
  set_has_login_time();
  login_time_ = value;
}

// required int32 last_logoff_time = 35;
inline bool db_role_info::has_last_logoff_time() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void db_role_info::set_has_last_logoff_time() {
  _has_bits_[1] |= 0x00000004u;
}
inline void db_role_info::clear_has_last_logoff_time() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void db_role_info::clear_last_logoff_time() {
  last_logoff_time_ = 0;
  clear_has_last_logoff_time();
}
inline ::google::protobuf::int32 db_role_info::last_logoff_time() const {
  return last_logoff_time_;
}
inline void db_role_info::set_last_logoff_time(::google::protobuf::int32 value) {
  set_has_last_logoff_time();
  last_logoff_time_ = value;
}

// required string login_ip = 36;
inline bool db_role_info::has_login_ip() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void db_role_info::set_has_login_ip() {
  _has_bits_[1] |= 0x00000008u;
}
inline void db_role_info::clear_has_login_ip() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void db_role_info::clear_login_ip() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    login_ip_->clear();
  }
  clear_has_login_ip();
}
inline const ::std::string& db_role_info::login_ip() const {
  return *login_ip_;
}
inline void db_role_info::set_login_ip(const ::std::string& value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void db_role_info::set_login_ip(const char* value) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(value);
}
inline void db_role_info::set_login_ip(const char* value, size_t size) {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  login_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_info::mutable_login_ip() {
  set_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    login_ip_ = new ::std::string;
  }
  return login_ip_;
}
inline ::std::string* db_role_info::release_login_ip() {
  clear_has_login_ip();
  if (login_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_ip_;
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_info::set_allocated_login_ip(::std::string* login_ip) {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (login_ip) {
    set_has_login_ip();
    login_ip_ = login_ip;
  } else {
    clear_has_login_ip();
    login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 instance_count = 37;
inline bool db_role_info::has_instance_count() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void db_role_info::set_has_instance_count() {
  _has_bits_[1] |= 0x00000010u;
}
inline void db_role_info::clear_has_instance_count() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void db_role_info::clear_instance_count() {
  instance_count_ = 0;
  clear_has_instance_count();
}
inline ::google::protobuf::int32 db_role_info::instance_count() const {
  return instance_count_;
}
inline void db_role_info::set_instance_count(::google::protobuf::int32 value) {
  set_has_instance_count();
  instance_count_ = value;
}

// required int32 instance_time = 38;
inline bool db_role_info::has_instance_time() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void db_role_info::set_has_instance_time() {
  _has_bits_[1] |= 0x00000020u;
}
inline void db_role_info::clear_has_instance_time() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void db_role_info::clear_instance_time() {
  instance_time_ = 0;
  clear_has_instance_time();
}
inline ::google::protobuf::int32 db_role_info::instance_time() const {
  return instance_time_;
}
inline void db_role_info::set_instance_time(::google::protobuf::int32 value) {
  set_has_instance_time();
  instance_time_ = value;
}

// required int32 guild_id = 39;
inline bool db_role_info::has_guild_id() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void db_role_info::set_has_guild_id() {
  _has_bits_[1] |= 0x00000040u;
}
inline void db_role_info::clear_has_guild_id() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void db_role_info::clear_guild_id() {
  guild_id_ = 0;
  clear_has_guild_id();
}
inline ::google::protobuf::int32 db_role_info::guild_id() const {
  return guild_id_;
}
inline void db_role_info::set_guild_id(::google::protobuf::int32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// required int32 guild_time = 40;
inline bool db_role_info::has_guild_time() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void db_role_info::set_has_guild_time() {
  _has_bits_[1] |= 0x00000080u;
}
inline void db_role_info::clear_has_guild_time() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void db_role_info::clear_guild_time() {
  guild_time_ = 0;
  clear_has_guild_time();
}
inline ::google::protobuf::int32 db_role_info::guild_time() const {
  return guild_time_;
}
inline void db_role_info::set_guild_time(::google::protobuf::int32 value) {
  set_has_guild_time();
  guild_time_ = value;
}

// required string guild_name = 41;
inline bool db_role_info::has_guild_name() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void db_role_info::set_has_guild_name() {
  _has_bits_[1] |= 0x00000100u;
}
inline void db_role_info::clear_has_guild_name() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void db_role_info::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& db_role_info::guild_name() const {
  return *guild_name_;
}
inline void db_role_info::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void db_role_info::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void db_role_info::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* db_role_info::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* db_role_info::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void db_role_info::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 phy_strength = 42;
inline bool db_role_info::has_phy_strength() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void db_role_info::set_has_phy_strength() {
  _has_bits_[1] |= 0x00000200u;
}
inline void db_role_info::clear_has_phy_strength() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void db_role_info::clear_phy_strength() {
  phy_strength_ = 0;
  clear_has_phy_strength();
}
inline ::google::protobuf::int32 db_role_info::phy_strength() const {
  return phy_strength_;
}
inline void db_role_info::set_phy_strength(::google::protobuf::int32 value) {
  set_has_phy_strength();
  phy_strength_ = value;
}

// required int32 extra_phy_strength = 43;
inline bool db_role_info::has_extra_phy_strength() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void db_role_info::set_has_extra_phy_strength() {
  _has_bits_[1] |= 0x00000400u;
}
inline void db_role_info::clear_has_extra_phy_strength() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void db_role_info::clear_extra_phy_strength() {
  extra_phy_strength_ = 0;
  clear_has_extra_phy_strength();
}
inline ::google::protobuf::int32 db_role_info::extra_phy_strength() const {
  return extra_phy_strength_;
}
inline void db_role_info::set_extra_phy_strength(::google::protobuf::int32 value) {
  set_has_extra_phy_strength();
  extra_phy_strength_ = value;
}

// required int32 time_to_recover_phy_strength = 44;
inline bool db_role_info::has_time_to_recover_phy_strength() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void db_role_info::set_has_time_to_recover_phy_strength() {
  _has_bits_[1] |= 0x00000800u;
}
inline void db_role_info::clear_has_time_to_recover_phy_strength() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void db_role_info::clear_time_to_recover_phy_strength() {
  time_to_recover_phy_strength_ = 0;
  clear_has_time_to_recover_phy_strength();
}
inline ::google::protobuf::int32 db_role_info::time_to_recover_phy_strength() const {
  return time_to_recover_phy_strength_;
}
inline void db_role_info::set_time_to_recover_phy_strength(::google::protobuf::int32 value) {
  set_has_time_to_recover_phy_strength();
  time_to_recover_phy_strength_ = value;
}

// required int32 time_to_recover_extra_phy_strength = 45;
inline bool db_role_info::has_time_to_recover_extra_phy_strength() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void db_role_info::set_has_time_to_recover_extra_phy_strength() {
  _has_bits_[1] |= 0x00001000u;
}
inline void db_role_info::clear_has_time_to_recover_extra_phy_strength() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void db_role_info::clear_time_to_recover_extra_phy_strength() {
  time_to_recover_extra_phy_strength_ = 0;
  clear_has_time_to_recover_extra_phy_strength();
}
inline ::google::protobuf::int32 db_role_info::time_to_recover_extra_phy_strength() const {
  return time_to_recover_extra_phy_strength_;
}
inline void db_role_info::set_time_to_recover_extra_phy_strength(::google::protobuf::int32 value) {
  set_has_time_to_recover_extra_phy_strength();
  time_to_recover_extra_phy_strength_ = value;
}

// required int32 renown = 46;
inline bool db_role_info::has_renown() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void db_role_info::set_has_renown() {
  _has_bits_[1] |= 0x00002000u;
}
inline void db_role_info::clear_has_renown() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void db_role_info::clear_renown() {
  renown_ = 0;
  clear_has_renown();
}
inline ::google::protobuf::int32 db_role_info::renown() const {
  return renown_;
}
inline void db_role_info::set_renown(::google::protobuf::int32 value) {
  set_has_renown();
  renown_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_role_5finfo_2eproto__INCLUDED
