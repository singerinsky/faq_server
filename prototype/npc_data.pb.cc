// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npc_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "npc_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcDataGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcDataGroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_npc_5fdata_2eproto() {
  protobuf_AddDesc_npc_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "npc_data.proto");
  GOOGLE_CHECK(file != NULL);
  NpcData_descriptor_ = file->message_type(0);
  static const int NpcData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcData, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcData, npc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcData, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcData, npc_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcData, npc_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcData, npc_level_),
  };
  NpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcData_descriptor_,
      NpcData::default_instance_,
      NpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcData));
  NpcDataGroup_descriptor_ = file->message_type(1);
  static const int NpcDataGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataGroup, npc_data_),
  };
  NpcDataGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcDataGroup_descriptor_,
      NpcDataGroup::default_instance_,
      NpcDataGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcDataGroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_npc_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcData_descriptor_, &NpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcDataGroup_descriptor_, &NpcDataGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_npc_5fdata_2eproto() {
  delete NpcData::default_instance_;
  delete NpcData_reflection_;
  delete NpcDataGroup::default_instance_;
  delete NpcDataGroup_reflection_;
}

void protobuf_AddDesc_npc_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016npc_data.proto\"p\n\007NpcData\022\016\n\006npc_id\030\001 "
    "\002(\005\022\020\n\010npc_type\030\002 \002(\005\022\020\n\010npc_name\030\003 \002(\014\022"
    "\016\n\006npc_hp\030\004 \002(\005\022\016\n\006npc_mp\030\005 \002(\005\022\021\n\tnpc_l"
    "evel\030\006 \002(\005\"*\n\014NpcDataGroup\022\032\n\010npc_data\030\001"
    " \003(\0132\010.NpcData", 174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "npc_data.proto", &protobuf_RegisterTypes);
  NpcData::default_instance_ = new NpcData();
  NpcDataGroup::default_instance_ = new NpcDataGroup();
  NpcData::default_instance_->InitAsDefaultInstance();
  NpcDataGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_npc_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_npc_5fdata_2eproto {
  StaticDescriptorInitializer_npc_5fdata_2eproto() {
    protobuf_AddDesc_npc_5fdata_2eproto();
  }
} static_descriptor_initializer_npc_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NpcData::kNpcIdFieldNumber;
const int NpcData::kNpcTypeFieldNumber;
const int NpcData::kNpcNameFieldNumber;
const int NpcData::kNpcHpFieldNumber;
const int NpcData::kNpcMpFieldNumber;
const int NpcData::kNpcLevelFieldNumber;
#endif  // !_MSC_VER

NpcData::NpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcData::InitAsDefaultInstance() {
}

NpcData::NpcData(const NpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcData::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  npc_type_ = 0;
  npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  npc_hp_ = 0;
  npc_mp_ = 0;
  npc_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcData::~NpcData() {
  SharedDtor();
}

void NpcData::SharedDtor() {
  if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete npc_name_;
  }
  if (this != default_instance_) {
  }
}

void NpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcData_descriptor_;
}

const NpcData& NpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npc_5fdata_2eproto();
  return *default_instance_;
}

NpcData* NpcData::default_instance_ = NULL;

NpcData* NpcData::New() const {
  return new NpcData;
}

void NpcData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    npc_type_ = 0;
    if (has_npc_name()) {
      if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
        npc_name_->clear();
      }
    }
    npc_hp_ = 0;
    npc_mp_ = 0;
    npc_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_type;
        break;
      }

      // required int32 npc_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_type_)));
          set_has_npc_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npc_name;
        break;
      }

      // required bytes npc_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_npc_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_hp;
        break;
      }

      // required int32 npc_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_hp_)));
          set_has_npc_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_npc_mp;
        break;
      }

      // required int32 npc_mp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_mp_)));
          set_has_npc_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_npc_level;
        break;
      }

      // required int32 npc_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_level_)));
          set_has_npc_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }

  // required int32 npc_type = 2;
  if (has_npc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npc_type(), output);
  }

  // required bytes npc_name = 3;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->npc_name(), output);
  }

  // required int32 npc_hp = 4;
  if (has_npc_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npc_hp(), output);
  }

  // required int32 npc_mp = 5;
  if (has_npc_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->npc_mp(), output);
  }

  // required int32 npc_level = 6;
  if (has_npc_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->npc_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }

  // required int32 npc_type = 2;
  if (has_npc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npc_type(), target);
  }

  // required bytes npc_name = 3;
  if (has_npc_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->npc_name(), target);
  }

  // required int32 npc_hp = 4;
  if (has_npc_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npc_hp(), target);
  }

  // required int32 npc_mp = 5;
  if (has_npc_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->npc_mp(), target);
  }

  // required int32 npc_level = 6;
  if (has_npc_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->npc_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }

    // required int32 npc_type = 2;
    if (has_npc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_type());
    }

    // required bytes npc_name = 3;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->npc_name());
    }

    // required int32 npc_hp = 4;
    if (has_npc_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_hp());
    }

    // required int32 npc_mp = 5;
    if (has_npc_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_mp());
    }

    // required int32 npc_level = 6;
    if (has_npc_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcData::MergeFrom(const NpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_npc_type()) {
      set_npc_type(from.npc_type());
    }
    if (from.has_npc_name()) {
      set_npc_name(from.npc_name());
    }
    if (from.has_npc_hp()) {
      set_npc_hp(from.npc_hp());
    }
    if (from.has_npc_mp()) {
      set_npc_mp(from.npc_mp());
    }
    if (from.has_npc_level()) {
      set_npc_level(from.npc_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcData::CopyFrom(const NpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void NpcData::Swap(NpcData* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(npc_type_, other->npc_type_);
    std::swap(npc_name_, other->npc_name_);
    std::swap(npc_hp_, other->npc_hp_);
    std::swap(npc_mp_, other->npc_mp_);
    std::swap(npc_level_, other->npc_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcData_descriptor_;
  metadata.reflection = NpcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcDataGroup::kNpcDataFieldNumber;
#endif  // !_MSC_VER

NpcDataGroup::NpcDataGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcDataGroup::InitAsDefaultInstance() {
}

NpcDataGroup::NpcDataGroup(const NpcDataGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcDataGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcDataGroup::~NpcDataGroup() {
  SharedDtor();
}

void NpcDataGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcDataGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcDataGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcDataGroup_descriptor_;
}

const NpcDataGroup& NpcDataGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npc_5fdata_2eproto();
  return *default_instance_;
}

NpcDataGroup* NpcDataGroup::default_instance_ = NULL;

NpcDataGroup* NpcDataGroup::New() const {
  return new NpcDataGroup;
}

void NpcDataGroup::Clear() {
  npc_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcDataGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NpcData npc_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_npc_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcDataGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NpcData npc_data = 1;
  for (int i = 0; i < this->npc_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npc_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcDataGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NpcData npc_data = 1;
  for (int i = 0; i < this->npc_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npc_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcDataGroup::ByteSize() const {
  int total_size = 0;

  // repeated .NpcData npc_data = 1;
  total_size += 1 * this->npc_data_size();
  for (int i = 0; i < this->npc_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcDataGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcDataGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcDataGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcDataGroup::MergeFrom(const NpcDataGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_data_.MergeFrom(from.npc_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcDataGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcDataGroup::CopyFrom(const NpcDataGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcDataGroup::IsInitialized() const {

  for (int i = 0; i < npc_data_size(); i++) {
    if (!this->npc_data(i).IsInitialized()) return false;
  }
  return true;
}

void NpcDataGroup::Swap(NpcDataGroup* other) {
  if (other != this) {
    npc_data_.Swap(&other->npc_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcDataGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcDataGroup_descriptor_;
  metadata.reflection = NpcDataGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
