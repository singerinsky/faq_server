// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemDataGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemDataGroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_item_5fdata_2eproto() {
  protobuf_AddDesc_item_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "item_data.proto");
  GOOGLE_CHECK(file != NULL);
  ItemData_descriptor_ = file->message_type(0);
  static const int ItemData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, can_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, level_limit_),
  };
  ItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemData_descriptor_,
      ItemData::default_instance_,
      ItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemData));
  ItemDataGroup_descriptor_ = file->message_type(1);
  static const int ItemDataGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDataGroup, item_data_),
  };
  ItemDataGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemDataGroup_descriptor_,
      ItemDataGroup::default_instance_,
      ItemDataGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDataGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDataGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemDataGroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_item_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemData_descriptor_, &ItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemDataGroup_descriptor_, &ItemDataGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_item_5fdata_2eproto() {
  delete ItemData::default_instance_;
  delete ItemData_reflection_;
  delete ItemDataGroup::default_instance_;
  delete ItemDataGroup_reflection_;
}

void protobuf_AddDesc_item_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017item_data.proto\"p\n\010ItemData\022\030\n\020item_te"
    "mplate_id\030\001 \002(\005\022\021\n\titem_type\030\002 \002(\005\022\021\n\tit"
    "em_name\030\003 \002(\014\022\017\n\007can_add\030\004 \002(\005\022\023\n\013level_"
    "limit\030\005 \002(\005\"-\n\rItemDataGroup\022\034\n\titem_dat"
    "a\030\001 \003(\0132\t.ItemData", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item_data.proto", &protobuf_RegisterTypes);
  ItemData::default_instance_ = new ItemData();
  ItemDataGroup::default_instance_ = new ItemDataGroup();
  ItemData::default_instance_->InitAsDefaultInstance();
  ItemDataGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_item_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_item_5fdata_2eproto {
  StaticDescriptorInitializer_item_5fdata_2eproto() {
    protobuf_AddDesc_item_5fdata_2eproto();
  }
} static_descriptor_initializer_item_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ItemData::kItemTemplateIdFieldNumber;
const int ItemData::kItemTypeFieldNumber;
const int ItemData::kItemNameFieldNumber;
const int ItemData::kCanAddFieldNumber;
const int ItemData::kLevelLimitFieldNumber;
#endif  // !_MSC_VER

ItemData::ItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemData::InitAsDefaultInstance() {
}

ItemData::ItemData(const ItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemData::SharedCtor() {
  _cached_size_ = 0;
  item_template_id_ = 0;
  item_type_ = 0;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_add_ = 0;
  level_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemData::~ItemData() {
  SharedDtor();
}

void ItemData::SharedDtor() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (this != default_instance_) {
  }
}

void ItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemData_descriptor_;
}

const ItemData& ItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_5fdata_2eproto();
  return *default_instance_;
}

ItemData* ItemData::default_instance_ = NULL;

ItemData* ItemData::New() const {
  return new ItemData;
}

void ItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_template_id_ = 0;
    item_type_ = 0;
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::kEmptyString) {
        item_name_->clear();
      }
    }
    can_add_ = 0;
    level_limit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_type;
        break;
      }

      // required int32 item_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
          set_has_item_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_name;
        break;
      }

      // required bytes item_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_add;
        break;
      }

      // required int32 can_add = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_add_)));
          set_has_can_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level_limit;
        break;
      }

      // required int32 level_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_limit_)));
          set_has_level_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_template_id(), output);
  }

  // required int32 item_type = 2;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_type(), output);
  }

  // required bytes item_name = 3;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->item_name(), output);
  }

  // required int32 can_add = 4;
  if (has_can_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->can_add(), output);
  }

  // required int32 level_limit = 5;
  if (has_level_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_template_id(), target);
  }

  // required int32 item_type = 2;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_type(), target);
  }

  // required bytes item_name = 3;
  if (has_item_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->item_name(), target);
  }

  // required int32 can_add = 4;
  if (has_can_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->can_add(), target);
  }

  // required int32 level_limit = 5;
  if (has_level_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_template_id = 1;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // required int32 item_type = 2;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // required bytes item_name = 3;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->item_name());
    }

    // required int32 can_add = 4;
    if (has_can_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_add());
    }

    // required int32 level_limit = 5;
    if (has_level_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemData::MergeFrom(const ItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_can_add()) {
      set_can_add(from.can_add());
    }
    if (from.has_level_limit()) {
      set_level_limit(from.level_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemData::CopyFrom(const ItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ItemData::Swap(ItemData* other) {
  if (other != this) {
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(item_type_, other->item_type_);
    std::swap(item_name_, other->item_name_);
    std::swap(can_add_, other->can_add_);
    std::swap(level_limit_, other->level_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemData_descriptor_;
  metadata.reflection = ItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemDataGroup::kItemDataFieldNumber;
#endif  // !_MSC_VER

ItemDataGroup::ItemDataGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemDataGroup::InitAsDefaultInstance() {
}

ItemDataGroup::ItemDataGroup(const ItemDataGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemDataGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemDataGroup::~ItemDataGroup() {
  SharedDtor();
}

void ItemDataGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemDataGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemDataGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemDataGroup_descriptor_;
}

const ItemDataGroup& ItemDataGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_5fdata_2eproto();
  return *default_instance_;
}

ItemDataGroup* ItemDataGroup::default_instance_ = NULL;

ItemDataGroup* ItemDataGroup::New() const {
  return new ItemDataGroup;
}

void ItemDataGroup::Clear() {
  item_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemDataGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ItemData item_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemDataGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ItemData item_data = 1;
  for (int i = 0; i < this->item_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemDataGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ItemData item_data = 1;
  for (int i = 0; i < this->item_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemDataGroup::ByteSize() const {
  int total_size = 0;

  // repeated .ItemData item_data = 1;
  total_size += 1 * this->item_data_size();
  for (int i = 0; i < this->item_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemDataGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemDataGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemDataGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemDataGroup::MergeFrom(const ItemDataGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_data_.MergeFrom(from.item_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemDataGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemDataGroup::CopyFrom(const ItemDataGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDataGroup::IsInitialized() const {

  for (int i = 0; i < item_data_size(); i++) {
    if (!this->item_data(i).IsInitialized()) return false;
  }
  return true;
}

void ItemDataGroup::Swap(ItemDataGroup* other) {
  if (other != this) {
    item_data_.Swap(&other->item_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemDataGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemDataGroup_descriptor_;
  metadata.reflection = ItemDataGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
